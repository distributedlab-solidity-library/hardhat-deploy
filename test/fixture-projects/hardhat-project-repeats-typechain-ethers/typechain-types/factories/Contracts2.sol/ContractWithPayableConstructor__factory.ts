/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { PayableOverrides } from "../../common";
import type {
  ContractWithPayableConstructor,
  ContractWithPayableConstructorInterface,
} from "../../Contracts2.sol/ContractWithPayableConstructor";

const _abi = [
  {
    inputs: [],
    stateMutability: "payable",
    type: "constructor",
  },
] as const;

const _bytecode =
  "0x6080604052603f8060116000396000f3fe6080604052600080fdfea26469706673582212200ea75379dbdbb2f7fdec05b2a13b54bee87297e63631c87ed4ee0b444c428a1d64736f6c63430007030033";

type ContractWithPayableConstructorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ContractWithPayableConstructorConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ContractWithPayableConstructor__factory extends ContractFactory {
  constructor(...args: ContractWithPayableConstructorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override getDeployTransaction(overrides?: PayableOverrides & { from?: string }): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: PayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ContractWithPayableConstructor & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ContractWithPayableConstructor__factory {
    return super.connect(runner) as ContractWithPayableConstructor__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ContractWithPayableConstructorInterface {
    return new Interface(_abi) as ContractWithPayableConstructorInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ContractWithPayableConstructor {
    return new Contract(address, _abi, runner) as unknown as ContractWithPayableConstructor;
  }
}
