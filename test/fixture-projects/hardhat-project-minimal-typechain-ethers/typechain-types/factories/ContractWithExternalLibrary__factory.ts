/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Contract, ContractFactory, ContractTransactionResponse, Interface } from "ethers";
import type { Signer, ContractDeployTransaction, ContractRunner } from "ethers";
import type { NonPayableOverrides } from "../common";
import type { ContractWithExternalLibrary, ContractWithExternalLibraryInterface } from "../ContractWithExternalLibrary";

const _abi = [
  {
    inputs: [],
    name: "lib",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "lib2",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x608060405234801561001057600080fd5b506101b9806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063928012301461003b578063ff1a250f14610059575b600080fd5b610043610077565b6040518082815260200191505060405180910390f35b6100616100fd565b6040518082815260200191505060405180910390f35b600073__$b9c1a48d6c9f5a88b03589aab3a8427642$__63928012306040518163ffffffff1660e01b815260040160206040518083038186803b1580156100bd57600080fd5b505af41580156100d1573d6000803e3d6000fd5b505050506040513d60208110156100e757600080fd5b8101908080519060200190929190505050905090565b600073__$3f2d97621aa449c79a29870f919f014493$__63928012306040518163ffffffff1660e01b815260040160206040518083038186803b15801561014357600080fd5b505af4158015610157573d6000803e3d6000fd5b505050506040513d602081101561016d57600080fd5b810190808051906020019092919050505090509056fea26469706673582212208c05f66be9e581f79bf6ed2efe32dd34a6963940b64428914b23d50ecabda48f64736f6c63430007030033";

type ContractWithExternalLibraryConstructorParams =
  | [linkLibraryAddresses: ContractWithExternalLibraryLibraryAddresses, signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ContractWithExternalLibraryConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => {
  return (
    typeof xs[0] === "string" ||
    (Array.isArray as (arg: any) => arg is readonly any[])(xs[0]) ||
    "_isInterface" in xs[0]
  );
};

export class ContractWithExternalLibrary__factory extends ContractFactory {
  constructor(...args: ContractWithExternalLibraryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      const [linkLibraryAddresses, signer] = args;
      super(_abi, ContractWithExternalLibrary__factory.linkBytecode(linkLibraryAddresses), signer);
    }
  }

  static linkBytecode(linkLibraryAddresses: ContractWithExternalLibraryLibraryAddresses): string {
    let linkedBytecode = _bytecode;

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$b9c1a48d6c9f5a88b03589aab3a8427642\\$__", "g"),
      linkLibraryAddresses["contracts/Contracts.sol:Library1"].replace(/^0x/, "").toLowerCase(),
    );

    linkedBytecode = linkedBytecode.replace(
      new RegExp("__\\$3f2d97621aa449c79a29870f919f014493\\$__", "g"),
      linkLibraryAddresses["contracts/Contracts.sol:Library2"].replace(/^0x/, "").toLowerCase(),
    );

    return linkedBytecode;
  }

  override getDeployTransaction(
    overrides?: NonPayableOverrides & { from?: string },
  ): Promise<ContractDeployTransaction> {
    return super.getDeployTransaction(overrides || {});
  }
  override deploy(overrides?: NonPayableOverrides & { from?: string }) {
    return super.deploy(overrides || {}) as Promise<
      ContractWithExternalLibrary & {
        deploymentTransaction(): ContractTransactionResponse;
      }
    >;
  }
  override connect(runner: ContractRunner | null): ContractWithExternalLibrary__factory {
    return super.connect(runner) as ContractWithExternalLibrary__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ContractWithExternalLibraryInterface {
    return new Interface(_abi) as ContractWithExternalLibraryInterface;
  }
  static connect(address: string, runner?: ContractRunner | null): ContractWithExternalLibrary {
    return new Contract(address, _abi, runner) as unknown as ContractWithExternalLibrary;
  }
}

export interface ContractWithExternalLibraryLibraryAddresses {
  ["contracts/Contracts.sol:Library1"]: string;
  ["contracts/Contracts.sol:Library2"]: string;
}
